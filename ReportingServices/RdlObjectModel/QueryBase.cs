using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Text.RegularExpressions;
using System.Xml.Serialization;

namespace Microsoft.ReportingServices.RdlObjectModel
{
  public class QueryBase : ReportObject
  {
    protected ExternalXmlElement m_designerState;
    protected bool m_autoGenerated;
    protected bool m_hidden;
    protected bool m_suppressAutoUpdate;
    protected bool m_useGenericDesigner;

    [DefaultValue(CommandTypes.Text)]
    public CommandTypes CommandType
    {
      get
      {
        return (CommandTypes) PropertyStore.GetInteger(0);
      }
      set
      {
        PropertyStore.SetInteger(0, (int) value);
      }
    }

    public ReportExpression CommandText
    {
      get
      {
        return PropertyStore.GetObject<ReportExpression>(1);
      }
      set
      {
        PropertyStore.SetObject(1, value);
      }
    }

    [DefaultValue(0)]
    [ValidValues(0, 2147483647)]
    public int Timeout
    {
      get
      {
        return PropertyStore.GetInteger(2);
      }
      set
      {
        ((ComparablePropertyDefinition<int>) DefinitionStore<Query, Definition.Properties>.GetProperty(2)).Validate(this, value);
        PropertyStore.SetInteger(2, value);
      }
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [XmlElement(Namespace = "http://schemas.microsoft.com/SQLServer/reporting/reportdesigner")]
    public ExternalXmlElement RQDDesignerState
    {
      get
      {
        return null;
      }
      set
      {
        DesignerState = value;
      }
    }

    [XmlElement(Namespace = "http://schemas.microsoft.com/SQLServer/reporting/reportdesigner")]
    public ExternalXmlElement DesignerState
    {
      get
      {
        return m_designerState;
      }
      set
      {
        if (m_designerState == value)
          return;
        SavePropertyValue("DesignerState", m_designerState, (ExternalXmlElement newValue, out ExternalXmlElement oldValue) =>
        {
	        oldValue = m_designerState;
	        m_designerState = newValue;
        });
        m_designerState = value;
      }
    }

    [XmlElement(Namespace = "http://schemas.microsoft.com/SQLServer/reporting/reportdesigner")]
    public ExternalXmlElement MdxQuery
    {
      get
      {
        return null;
      }
      set
      {
        DesignerState = value;
      }
    }

    [DefaultValue(false)]
    [XmlElement(Namespace = "http://schemas.microsoft.com/SQLServer/reporting/reportdesigner")]
    public bool AutoGenerated
    {
      get
      {
        return m_autoGenerated;
      }
      set
      {
        if (m_autoGenerated == value)
          return;
        SavePropertyValue("AutoGenerated", m_autoGenerated, (bool newValue, out bool oldValue) =>
        {
	        oldValue = m_autoGenerated;
	        m_autoGenerated = newValue;
        });
        m_autoGenerated = value;
      }
    }

    [XmlElement(Namespace = "http://schemas.microsoft.com/SQLServer/reporting/reportdesigner")]
    [DefaultValue(false)]
    public bool Hidden
    {
      get
      {
        return m_hidden;
      }
      set
      {
        if (m_hidden == value)
          return;
        SavePropertyValue("Hidden", m_hidden, (bool newValue, out bool oldValue) =>
        {
	        oldValue = m_hidden;
	        m_hidden = newValue;
        });
        m_hidden = value;
      }
    }

    [DefaultValue(false)]
    [XmlElement(Namespace = "http://schemas.microsoft.com/SQLServer/reporting/reportdesigner")]
    public bool SuppressAutoUpdate
    {
      get
      {
        return m_suppressAutoUpdate;
      }
      set
      {
        if (m_suppressAutoUpdate == value)
          return;
        SavePropertyValue("SuppressAutoUpdate", m_suppressAutoUpdate, (bool newValue, out bool oldValue) =>
        {
	        oldValue = m_suppressAutoUpdate;
	        m_suppressAutoUpdate = newValue;
        });
        m_suppressAutoUpdate = value;
      }
    }

    [XmlElement(Namespace = "http://schemas.microsoft.com/SQLServer/reporting/reportdesigner")]
    [DefaultValue(false)]
    public bool UseGenericDesigner
    {
      get
      {
        return m_useGenericDesigner;
      }
      set
      {
        if (m_useGenericDesigner == value)
          return;
        SavePropertyValue("UseGenericDesigner", m_useGenericDesigner, (bool newValue, out bool oldValue) =>
        {
	        oldValue = m_useGenericDesigner;
	        m_useGenericDesigner = newValue;
        });
        m_useGenericDesigner = value;
      }
    }

    public QueryBase()
    {
    }

    internal QueryBase(IPropertyStore propertyStore)
      : base(propertyStore)
    {
    }

    public override void Initialize()
    {
      base.Initialize();
    }

    public bool Equals(QueryBase queryBase)
    {
      if (queryBase == null || !CommandTextEquivalent(CommandText, queryBase.CommandText) || CommandType != queryBase.CommandType)
        return false;
      return Timeout == queryBase.Timeout;
    }

    public override bool Equals(object obj)
    {
      return Equals(obj as QueryBase);
    }

    private bool CommandTextEquivalent(ReportExpression first, ReportExpression second)
    {
      return FixCommandText(first.ToString()) == FixCommandText(second.ToString());
    }

    private string FixCommandText(string text)
    {
      return Regex.Replace(Regex.Replace(text, "(\\r|\\n)", ""), "^\\s*(.*?)\\s*$", "$1");
    }

    public override int GetHashCode()
    {
      return CommandText.GetHashCode();
    }

    protected override bool RdlSemanticEqualsCore(ReportObject rdlObj, ICollection<ReportObject> visitedList)
    {
      QueryBase queryBase = rdlObj as QueryBase;
      if (queryBase == null || CommandType != queryBase.CommandType || Timeout != queryBase.Timeout)
        return false;
      if (CommandText.IsExpression && queryBase.CommandText.IsExpression)
      {
        if (CommandText != queryBase.CommandText)
          return false;
      }
      else if (!string.Equals(CommandText.Expression.Trim(), queryBase.CommandText.Expression.Trim(), StringComparison.Ordinal))
        return false;
      return true;
    }

    internal class Definition : DefinitionStore<Query, Definition.Properties>
    {
      internal enum Properties
      {
        CommandType,
        CommandText,
        Timeout,
      }
    }
  }
}
